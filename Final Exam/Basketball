using System.Text;

namespace Basketball
{
    public class Player
    {
        public Player(string name, string position, double rating, int games)
        {
            Name = name;
            Position = position;
            Rating = rating;
            Games = games;
            Retired = false;
        }

        public string Name { get; set; }
        public string Position { get; set; }
        public double Rating { get; set; }
        public int Games { get; set; }
        public bool Retired { get; set; }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine($"-Player: {Name}");
            sb.AppendLine($"--Position: {Position}");
            sb.AppendLine($"--Rating: {Rating}");
            sb.AppendLine($"--Games played: {Games}");

            return sb.ToString().TrimEnd();
        }
    }
}

(ЧАСТ 1)

﻿using System;
using System.Collections.Generic;

namespace Basketball
{
    public class StartUp
    {
        static void Main()
        {
            // Initialize the repository (Team)
            Team team = new Team("BHTC", 5, 'A');

            // Initialize entity
            Player firstPlayer = new Player("Viktor", "Center", 97.5, 10);

            // Print player
            Console.WriteLine(firstPlayer);
            /*
            -Player: Viktor
            --Position: Center
            --Rating: 97.5
            --Games played: 10
            */

            // Add Player
            Console.WriteLine(team.AddPlayer(firstPlayer));
            /* 
            Successfully added Viktor to the team. Remaining open positions: 4.
            */

            // Check count of added players
            Console.WriteLine(team.Count);
            /* 
            1
            */

            // Remove Player
            Console.WriteLine(team.RemovePlayer("Slavi"));
            /* 
            False
            */

            Player secondPlayer = new Player("Slavi", "Point Guard", 94.3, 47);
            Player thirdPlayer = new Player("Evgeni", "Shooting Guard", 93.7, 16);
            Player fourthPlayer = new Player("Momchil", "Small forward", 67.9, 3);
            Player fifthPlayer = new Player("Vasil", "Power forward", 86.9, 10);
            Player sixthPlayer = new Player("Stefan", "Center", 95.6, 25);
            Player seventhPlayer = new Player("Ivan", " Small forward ", 98.5, 89);


            // Add players
            Console.WriteLine(team.AddPlayer(secondPlayer));
            Console.WriteLine(team.AddPlayer(thirdPlayer));
            Console.WriteLine(team.AddPlayer(fourthPlayer));
            Console.WriteLine(team.AddPlayer(fifthPlayer));
            Console.WriteLine(team.AddPlayer(sixthPlayer));
            Console.WriteLine(team.AddPlayer(seventhPlayer));
            /*
            Successfully added Slavi to the team. Remaining open positions: 3
            Successfully added Evgeni to the team. Remaining open positions: 2
            Invalid player's rating
            Successfully added Vasil to the team. Remaining open positions: 1
            Successfully added Stefan to the team. Remaining open positions: 0
            There are no more open positions.
            */

            // Retire player by name
            Console.WriteLine(team.RetirePlayer("Slavi"));
            /*
            -Player: Slavi
            --Position: Point Guard
            --Rating: 94.3
            --Games played: 47
            */

            // Award players
            List<Player> players = team.AwardPlayers(15);
            foreach (var playerToBeAwarded in players)
            {
                Console.WriteLine(playerToBeAwarded);
            }
            /*
            -Player: Slavi
            --Position: Point Guard
            --Rating: 94.3
            --Games played: 47
            -Player: Evgeni
            --Position: Shooting Guard
            --Rating: 93.7
            --Games played: 16
            -Player: Stefan
            --Position: Center
            --Rating: 95.6
            --Games played: 25
            */

            // Remove player by position
            Console.WriteLine(team.RemovePlayerByPosition("Center"));
            /*
            2
            */

            // Report
            Console.WriteLine("----------------------Report----------------------");
            Console.WriteLine(team.Report());
            /*
            Active players competing for Team BHTC from Group A:
            -Player: Evgeni
            --Position: Shooting Guard
            --Rating: 93.7
            --Games played: 16
            -Player: Vasil
            --Position: Power forward
            --Rating: 86.9
            --Games played: 10
            */

        }
    }
}

(ЧАСТ 2)

﻿using System.Collections.Generic;
using System.Linq;
using System.Text;


namespace Basketball
{
    public class Team
    {
        private List<Player> players;

        public Team(string name, int openPositions, char group)
        {
            this.players = new List<Player>();
            Name = name;
            OpenPositions = openPositions;
            Group = group;
        }

        public int Count => players.Count;
        public string Name { get; set; }
        public int OpenPositions { get; set; }
        public char Group { get; set; }

        public string AddPlayer(Player player)
        {
            if (string.IsNullOrEmpty(player.Name) || string.IsNullOrEmpty(player.Position))
            {
                return "Invalid player's information.";
            }

            if (this.OpenPositions == 0)
            {
                return "There are no more open positions.";
            }

            if (player.Rating < 80)
            {
                return "Invalid player's rating.";
            }

            this.players.Add(player);
            this.OpenPositions--;

            return $"Successfully added {player.Name} to the team. Remaining open positions: {this.OpenPositions}.";
        }

        public bool RemovePlayer(string name)
        {
            for (int i = 0; i < this.Count; i++)
            {
                if (this.players[i].Name == name)
                {
                    this.players.RemoveAt(i);
                    this.OpenPositions++;
                    return true;
                }
            }
            
            return false;
        }

        public int RemovePlayerByPosition(string position)
        {
            int counter = 0;

            for (int i = this.Count - 1; i >= 0; i--)
            {
                if (this.players[i].Position == position)
                {
                    counter++;
                    this.OpenPositions++;
                    this.players.RemoveAt(i);
                }
            }

            return counter;
        }

        public Player RetirePlayer(string name)
        {
            foreach (var player in this.players)
            {
                if (player.Name == name)
                {
                    player.Retired = true;
                    return player;
                }
            }

            return default;
        }

        public List<Player> AwardPlayers(int games)
        {
            List<Player> awardedPlayers = new List<Player>();

            foreach (var player in this.players)
            {
                if (player.Games >= games)
                {
                    awardedPlayers.Add(player);
                }
            }

            return awardedPlayers;
        }

        public string Report()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine($"Active players competing for Team {this.Name} from Group {this.Group}:");

            foreach (var player in this.players)
            {
                if (player.Retired == false)
                {
                    sb.AppendLine(player.ToString());
                }
            }

            return sb.ToString().TrimEnd();
        }
    }
}
(ЧАСТ 3)
